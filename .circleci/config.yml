# CircleCI configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2.1

orbs:
  win: circleci/windows@2.2.0  # Enables Windows executors
  codecov: codecov/codecov@3.2.2

references:
  restore_keys: &restore_keys
    keys:
      - python-env-v7-{{ arch }}-{{ .Environment.CIRCLE_JOB }}-{{ checksum "setup.py" }}-{{ checksum "requirements/requirements-test.txt" }}-{{ checksum "requirements/requirements-test-optional.txt" }}-{{ checksum ".circleci/ci-oldest-reqs.txt" }}

  save_key: &save_key
    key: python-env-v7-{{ arch }}-{{ .Environment.CIRCLE_JOB }}-{{ checksum "setup.py" }}-{{ checksum "requirements/requirements-test.txt" }}-{{ checksum "requirements/requirements-test-optional.txt" }}-{{ checksum ".circleci/ci-oldest-reqs.txt" }}

jobs:
  linux-python-310: &linux-template
    docker:
      - image: cimg/python:3.10
      - image: circleci/mongo:latest
      - image: circleci/redis:latest

    environment:
      BENCHMARKS: "RUN"
      DEPENDENCIES: "NEWEST"
      PYTHON: python

    working_directory: ~/repo

    steps:

      - checkout

      - restore_cache:
          <<: *restore_keys

      - run:
          name: Install dependencies
          command: |
            ${PYTHON} -m pip install --progress-bar off -U virtualenv --user
            mkdir -p ./venv
            ${PYTHON} -m virtualenv ./venv --clear
            . venv/bin/activate
            if [[ "${CIRCLE_JOB}" != *"pypy"* ]]; then
              sudo apt update -qq && sudo apt install -y -qq libhdf5-dev
            fi
            ${PYTHON} -m pip install --progress-bar off -U pip>=20.3
            # DEPENDENCIES can be "OLDEST", "NEWEST", or "MINIMAL"
            if [ "${DEPENDENCIES}" == "OLDEST" ]; then
              # Some of the "oldest" requirements are not strictly the lowest
              # versions, and are only needed for testing. The "oldest"
              # requirements filename and directory cannot contain
              # "requirements" or else dependabot will attempt to update, which
              # we do not want.
              ${PYTHON} -m pip install --progress-bar off -r .circleci/ci-oldest-reqs.txt
            elif [ "${DEPENDENCIES}" == "NEWEST" ]; then
              ${PYTHON} -m pip install --progress-bar off -U -r requirements/requirements-test.txt
              ${PYTHON} -m pip install --progress-bar off -U -r requirements/requirements-test-optional.txt
            else
              # "${DEPENDENCIES}" == "MINIMAL"
              # Install only testing requirements.
              ${PYTHON} -m pip install --progress-bar off -U -r requirements/requirements-test.txt
            fi
            ${PYTHON} -m pip install --progress-bar off -e .

      - save_cache:
          <<: *save_key
          paths:
            - "venv"

      - run:
          name: Run tests
          command: |
            . venv/bin/activate
            ${PYTHON} -m pytest -n 2 --dist loadfile --cov=signac --cov-config=setup.cfg --cov-report=xml tests/ -v

      - store_artifacts:
          path: test-reports
          destination: test-reports

      - run:
          name: Run benchmarks
          command: |
            # Benchmarks depend on pandas, which isn't available for pypy or
            # minimal dependencies
            # BENCHMARKS can be "RUN" or "SKIP"
            if [[ "${BENCHMARKS}" == "RUN" ]]; then
              . venv/bin/activate
              ${PYTHON} -m pip install --progress-bar off -r requirements/requirements-benchmark.txt
              ${PYTHON} -m pip freeze
              ${PYTHON} benchmark.py run -N 100 1000  # this revision
              ${PYTHON} benchmark.py report
              git reset --hard origin/master
              git checkout "${CIRCLE_SHA1}" -- benchmark.py  # ensure that we use the same benchmark script
              ${PYTHON} benchmark.py run -N 100 1000 --force
              ${PYTHON} benchmark.py compare origin/master "${CIRCLE_SHA1}"
            fi

  linux-python-310-minimal:
    <<: *linux-template
    docker:
      - image: cimg/python:3.10
    environment:
      BENCHMARKS: "SKIP"
      DEPENDENCIES: "MINIMAL"
      PYTHON: python

  linux-python-39:
    <<: *linux-template
    docker:
      - image: cimg/python:3.9
      - image: circleci/mongo:latest
      - image: circleci/redis:latest

  linux-python-38:
    <<: *linux-template
    docker:
      - image: cimg/python:3.8
      - image: circleci/mongo:latest
      - image: circleci/redis:latest

  linux-python-38-oldest:
    <<: *linux-template
    docker:
      - image: cimg/python:3.8
      - image: circleci/mongo:latest
      - image: circleci/redis:latest
    environment:
      BENCHMARKS: "SKIP"
      DEPENDENCIES: "OLDEST"
      PYTHON: python

  linux-pypy-38:
    <<: *linux-template
    docker:
      - image: pypy:3.8
    environment:
      BENCHMARKS: "SKIP"
      DEPENDENCIES: "NEWEST"
      PYTHON: pypy3

  windows-python-310:
    executor:
      name: win/default
      shell: bash.exe
    environment:
      PYTHON: C:\Python310\python
    steps:
      - checkout
      - run:
          name: Install Python
          command: |
            choco install python --version 3.10.2 --limit-output --no-progress
      - run:
          name: Install dependencies
          command: |
            ${PYTHON} -m pip install --progress-bar off -U pip>=20.3
            ${PYTHON} -m pip install --progress-bar off -U -r requirements/requirements-test.txt

            # For some reason Zarr doesn't install correctly on Windows (runs
            # into pip SSL errors), so we skip that test.
            grep -v zarr requirements-test-optional.txt > requirements-test-optional-windows.txt
            ${PYTHON} -m pip install --progress-bar off -U -r requirements-test-optional-windows.txt

            ${PYTHON} -m pip install --progress-bar off -U -e .
      - run:
          name: Run tests
          command: |
            ${PYTHON} -m pytest -n 2 --dist loadfile --cov=signac --cov-report=xml tests/ -v

  macos-python-3:
    macos:  # executor type
      xcode: 13.2.0
    steps:
      - checkout
      - run:
          name: Create environment and run tests
          command: |
            # The default Python on OS X is still Python2, so we must specify
            # python3. We create a virtual environment so that the python
            # command line executable is python3. This change is necessary
            # because the tests of signac's CLI call `python`, so they'll use
            # the python2 executable by default.
            python3 -m venv create test_env
            . test_env/bin/activate
            python --version
            python -m pip install --progress-bar off -U pip>=20.3
            python -m pip install --progress-bar off -U -r requirements/requirements-test.txt
            python -m pip install --progress-bar off -U -r requirements/requirements-test-optional.txt
            python -m pip install --progress-bar off -U -e .
            python -m pytest -n 2 --dist loadfile --cov=signac --cov-report=xml tests/ -v

  check-metadata:
    docker:
      - image: cimg/python:3.10
    working_directory: ~/repo
    steps:
      - checkout
      - run:
          name: check-zenodo-metadata
          command: |
            python -c "import json; json.load(open('.zenodo.json'))"
      - run:
          name: references.bib
          command: |
            pip install --progress-bar off --user -U pybtex
            python -c "import pybtex; print(pybtex.format_from_file(open('references.bib'), style='unsrt', output_backend='text'))"

  test-deploy-pypi:
    docker:
      - image: cimg/python:3.10
    working_directory: ~/repo
    steps:
      - checkout
      - run:
          name: test-deploy-pypi
          command: |
            bash .circleci/deploy.bash testpypi

  deploy-pypi:
    docker:
      - image: cimg/python:3.10
    working_directory: ~/repo
    steps:
      - checkout
      - run:
          name: deploy-pypi
          command: |
            bash .circleci/deploy.bash pypi


workflows:
  version: 2
  test:
    jobs:
      - linux-python-310:
          post-steps:
            - codecov/upload
      - linux-python-310-minimal:
          post-steps:
            - codecov/upload
      - linux-python-39:
          post-steps:
            - codecov/upload
      - linux-python-38:
          post-steps:
            - codecov/upload
      - linux-python-38-oldest:
          post-steps:
            - codecov/upload
      - linux-pypy-38:
          post-steps:
            - codecov/upload
      - windows-python-310:
          post-steps:
            - codecov/upload
      - macos-python-3:
          post-steps:
            - codecov/upload
      - check-metadata:
          filters:
            branches:
              only: /release\/.*/
      - test-deploy-pypi:
          filters:
            branches:
              only: /release\/.*/
          requires:
            - linux-python-310
            - linux-python-310-minimal
            - linux-python-39
            - linux-python-38
            - linux-python-38-oldest
            - linux-pypy-38
            - windows-python-310
  deploy:
    jobs:
      - deploy-pypi:
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /v.*/
